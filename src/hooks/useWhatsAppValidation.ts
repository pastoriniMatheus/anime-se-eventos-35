
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

export const useWhatsAppValidation = () => {
  const [isValidating, setIsValidating] = useState(false);
  const [validationResult, setValidationResult] = useState<'valid' | 'invalid' | null>(null);
  const { toast } = useToast();

  const validateWhatsApp = async (phone: string): Promise<boolean> => {
    const numbers = phone.replace(/\D/g, '');
    
    if (numbers.length !== 11) {
      setValidationResult('invalid');
      toast({
        title: "Formato inv√°lido",
        description: "O n√∫mero deve ter 11 d√≠gitos (DD + 9 d√≠gitos)",
        variant: "destructive",
      });
      return false;
    }

    setIsValidating(true);
    
    try {
      console.log('üîÑ Iniciando valida√ß√£o WhatsApp para:', numbers);

      // Buscar webhook de valida√ß√£o nas configura√ß√µes  
      const { data: settings, error: settingsError } = await supabase
        .from('system_settings')
        .select('*')
        .eq('key', 'webhook_urls')
        .single();

      if (settingsError || !settings?.value) {
        console.log('‚ùå Webhook n√£o configurado:', settingsError);
        toast({
          title: "Configura√ß√£o necess√°ria",
          description: "Configure o webhook de valida√ß√£o WhatsApp nas configura√ß√µes do sistema para usar esta funcionalidade.",
          variant: "destructive",
        });
        setIsValidating(false);
        setValidationResult('valid'); // Permitir prosseguir sem valida√ß√£o se n√£o configurado
        return true;
      }

      const webhookUrls = typeof settings.value === 'object' ? settings.value as any : JSON.parse(settings.value as string);
      const webhookUrl = webhookUrls?.whatsappValidation;
      
      if (!webhookUrl) {
        console.log('‚ùå Webhook de valida√ß√£o n√£o configurado');
        toast({
          title: "Configura√ß√£o necess√°ria",
          description: "Configure o webhook de valida√ß√£o WhatsApp nas configura√ß√µes do sistema para usar esta funcionalidade.",
          variant: "destructive",
        });
        setIsValidating(false);
        setValidationResult('valid'); // Permitir prosseguir sem valida√ß√£o se n√£o configurado
        return true;
      }

      console.log('‚úÖ Webhook encontrado:', webhookUrl);

      // Gerar ID √∫nico para a valida√ß√£o
      const validationId = crypto.randomUUID();
      console.log('üÜî ID de valida√ß√£o gerado:', validationId);

      // Verificar se j√° existe uma valida√ß√£o com este ID (improv√°vel mas poss√≠vel)
      const { data: existingValidation } = await (supabase as any)
        .from('whatsapp_validations')
        .select('*')
        .eq('id', validationId)
        .maybeSingle();

      if (existingValidation) {
        console.log('‚ö†Ô∏è ID de valida√ß√£o j√° existe, gerando novo...');
        return validateWhatsApp(phone); // Tentar novamente com novo ID
      }

      // Chamar a edge function de valida√ß√£o
      console.log('üì° Chamando edge function validate-whatsapp...');
      const { data, error } = await supabase.functions.invoke('validate-whatsapp', {
        body: {
          whatsapp: numbers,
          validation_id: validationId
        }
      });

      if (error) {
        console.error('‚ùå Erro na edge function:', error);
        throw new Error(error.message || 'Erro na fun√ß√£o de valida√ß√£o');
      }

      console.log('‚úÖ Edge function retornou:', data);

      // Aguardar resposta da valida√ß√£o com timeout estendido
      const pollValidation = async (): Promise<boolean> => {
        let attempts = 0;
        const maxAttempts = 45; // Aumentado para 45 segundos
        
        console.log('üîç Iniciando polling para valida√ß√£o ID:', validationId);
        console.log('‚è±Ô∏è Timeout configurado para:', maxAttempts, 'segundos');
        
        while (attempts < maxAttempts) {
          console.log(`üìä Tentativa ${attempts + 1}/${maxAttempts} - Aguardando resposta...`);
          
          const { data: validation, error: queryError } = await (supabase as any)
            .from('whatsapp_validations')
            .select('*')
            .eq('id', validationId)
            .maybeSingle();

          if (queryError) {
            console.error('‚ùå Erro na consulta:', queryError);
          } else if (validation) {
            console.log('üìã Valida√ß√£o encontrada:', {
              id: validation.id,
              status: validation.status,
              created_at: validation.created_at,
              validated_at: validation.validated_at,
              response_message: validation.response_message
            });
            
            if (validation.status !== 'pending') {
              console.log('üéØ Valida√ß√£o finalizada com status:', validation.status);
              
              if (validation.status === 'valid') {
                setValidationResult('valid');
                setIsValidating(false);
                console.log('‚úÖ N√∫mero validado com sucesso!');
                toast({
                  title: "WhatsApp validado",
                  description: "N√∫mero verificado com sucesso!",
                  variant: "default",
                });
                return true;
              } else if (validation.status === 'invalid') {
                setValidationResult('invalid');
                setIsValidating(false);
                console.log('‚ùå N√∫mero inv√°lido:', validation.response_message);
                toast({
                  title: "WhatsApp n√£o encontrado",
                  description: validation.response_message || "Por favor, verifique e digite novamente seu n√∫mero do WhatsApp. Certifique-se de que o n√∫mero est√° correto e ativo.",
                  variant: "destructive",
                });
                return false;
              } else if (validation.status === 'error') {
                setValidationResult('invalid');
                setIsValidating(false);
                console.log('üí• Erro na valida√ß√£o:', validation.response_message);
                toast({
                  title: "Erro na valida√ß√£o",
                  description: validation.response_message || "Ocorreu um erro ao validar o n√∫mero. Tente novamente.",
                  variant: "destructive",
                });
                return false;
              }
            } else {
              console.log('‚è≥ Valida√ß√£o ainda pendente, aguardando...');
            }
          } else {
            console.log('‚ö†Ô∏è Nenhuma valida√ß√£o encontrada ainda...');
          }

          // Aguardar 1 segundo antes de tentar novamente
          await new Promise(resolve => setTimeout(resolve, 1000));
          attempts++;
        }

        // Timeout - verificar uma √∫ltima vez se houve atraso
        console.log('‚è∞ Timeout atingido - verificando uma √∫ltima vez...');
        const { data: finalValidation } = await (supabase as any)
          .from('whatsapp_validations')
          .select('*')
          .eq('id', validationId)
          .maybeSingle();

        if (finalValidation && finalValidation.status !== 'pending') {
          console.log('üîÑ Valida√ß√£o encontrada ap√≥s timeout:', finalValidation.status);
          
          if (finalValidation.status === 'valid') {
            setValidationResult('valid');
            setIsValidating(false);
            return true;
          } else {
            setValidationResult('invalid');
            setIsValidating(false);
            return false;
          }
        }

        // Realmente timeout - permitir prosseguir com aviso
        console.log('‚è∞ Timeout definitivo na valida√ß√£o - permitindo prosseguir');
        toast({
          title: "Timeout na valida√ß√£o",
          description: "N√£o foi poss√≠vel validar o n√∫mero em tempo h√°bil. O webhook pode estar lento ou indispon√≠vel. Voc√™ pode prosseguir, mas recomendamos verificar as configura√ß√µes.",
          variant: "default",
        });
        setValidationResult('valid');
        setIsValidating(false);
        return true;
      };

      return await pollValidation();

    } catch (error: any) {
      console.error('üí• Erro na valida√ß√£o:', error);
      setIsValidating(false);
      
      // Em caso de erro, permitir prosseguir mas avisar o usu√°rio
      let errorMessage = "Erro na valida√ß√£o, mas voc√™ pode prosseguir";
      let errorTitle = "Aviso";
      
      if (error.message?.includes('Webhook')) {
        errorMessage = "Servi√ßo de valida√ß√£o indispon√≠vel. Voc√™ pode prosseguir.";
        errorTitle = "Servi√ßo indispon√≠vel";
      } else if (error.message?.includes('timeout') || error.message?.includes('Timeout')) {
        errorMessage = "A valida√ß√£o est√° demorando mais que o esperado. Verifique sua conex√£o e as configura√ß√µes do webhook.";
        errorTitle = "Timeout na valida√ß√£o";
      }
      
      toast({
        title: errorTitle,
        description: errorMessage,
        variant: "default",
      });
      
      setValidationResult('valid'); // Permitir prosseguir em caso de erro
      return true;
    }
  };

  return {
    validateWhatsApp,
    isValidating,
    validationResult,
    setValidationResult
  };
};
