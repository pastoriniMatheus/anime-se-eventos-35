
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({
      error: 'Method not allowed',
      details: 'Only POST method is allowed'
    }), { 
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    const { password } = await req.json();

    // Verificar senha de acesso
    const requiredPassword = "admin123"; // Senha fixa para acesso ao dump
    if (!password || password !== requiredPassword) {
      return new Response(JSON.stringify({
        error: 'Unauthorized',
        details: 'Senha incorreta para exporta√ß√£o do banco de dados'
      }), { 
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üöÄ Iniciando exporta√ß√£o autorizada do banco de dados`);

    // Usar cliente Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
      return new Response(JSON.stringify({
        error: 'Server configuration error',
        details: 'Missing Supabase environment variables'
      }), { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Lista das tabelas do sistema
    const systemTables = [
      'authorized_users',
      'courses', 
      'events',
      'lead_statuses',
      'leads',
      'message_history',
      'message_templates',
      'qr_codes',
      'scan_sessions',
      'system_settings',
      'whatsapp_validations'
    ];

    console.log(`üìä Exportando ${systemTables.length} tabelas do sistema`);

    let dumpContent = `-- Database dump created on ${new Date().toISOString()}\n`;
    dumpContent += `-- Generated by Lead Management System\n`;
    dumpContent += `-- Format: PostgreSQL SQL Dump\n`;
    dumpContent += `--\n`;
    dumpContent += `-- To restore this dump:\n`;
    dumpContent += `-- psql -h [HOST] -p [PORT] -U [USERNAME] -d [DATABASE] -f [DUMP_FILE]\n`;
    dumpContent += `--\n\n`;

    dumpContent += `SET statement_timeout = 0;\n`;
    dumpContent += `SET lock_timeout = 0;\n`;
    dumpContent += `SET client_encoding = 'UTF8';\n`;
    dumpContent += `SET standard_conforming_strings = on;\n`;
    dumpContent += `SET check_function_bodies = false;\n`;
    dumpContent += `SET xmloption = content;\n`;
    dumpContent += `SET client_min_messages = warning;\n`;
    dumpContent += `SET row_security = off;\n\n`;

    // Exportar dados de cada tabela
    for (const tableName of systemTables) {
      console.log(`üìã Exportando tabela: ${tableName}`);

      try {
        const { data: tableData, error: dataError } = await supabase
          .from(tableName)
          .select('*');

        if (dataError) {
          console.error(`‚ùå Erro ao buscar dados da tabela ${tableName}:`, dataError);
          dumpContent += `\n-- Error exporting table ${tableName}: ${dataError.message}\n`;
          continue;
        }

        if (tableData && tableData.length > 0) {
          dumpContent += `\n--\n-- Data for table: ${tableName}\n--\n\n`;
          dumpContent += `TRUNCATE TABLE ${tableName} CASCADE;\n`;
          
          // Gerar INSERTs
          for (const row of tableData) {
            const columns = Object.keys(row).join(', ');
            const values = Object.values(row).map(val => {
              if (val === null) return 'NULL';
              if (typeof val === 'string') return `'${val.replace(/'/g, "''")}'`;
              if (typeof val === 'object') return `'${JSON.stringify(val).replace(/'/g, "''")}'`;
              if (typeof val === 'boolean') return val ? 'true' : 'false';
              if (val instanceof Date) return `'${val.toISOString()}'`;
              return val;
            }).join(', ');
            
            dumpContent += `INSERT INTO ${tableName} (${columns}) VALUES (${values});\n`;
          }
          
          console.log(`‚úÖ Tabela ${tableName}: ${tableData.length} registros exportados`);
        } else {
          dumpContent += `\n-- Table ${tableName} is empty\n`;
          console.log(`‚ÑπÔ∏è Tabela ${tableName} est√° vazia`);
        }
      } catch (tableError: any) {
        console.error(`‚ùå Erro ao processar tabela ${tableName}:`, tableError);
        dumpContent += `\n-- Error exporting table ${tableName}: ${tableError.message}\n`;
      }
    }

    dumpContent += `\n-- Restore sequences\n`;
    dumpContent += `SELECT setval('leads_id_seq', (SELECT MAX(id) FROM leads));\n`;
    dumpContent += `SELECT setval('courses_id_seq', (SELECT MAX(id) FROM courses));\n`;
    dumpContent += `SELECT setval('events_id_seq', (SELECT MAX(id) FROM events));\n`;
    dumpContent += `\n-- Dump completed on ${new Date().toISOString()}\n`;

    console.log(`‚úÖ Dump conclu√≠do com sucesso. Tamanho: ${dumpContent.length} caracteres`);

    // Retornar como arquivo SQL
    return new Response(dumpContent, {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/sql',
        'Content-Disposition': `attachment; filename="database-dump-${new Date().toISOString().split('T')[0]}.sql"`
      },
      status: 200
    });

  } catch (error: any) {
    console.error('üí• ERRO GERAL NA EDGE FUNCTION:', error);
    
    return new Response(JSON.stringify({
      error: 'Database export failed',
      details: error.message,
      timestamp: new Date().toISOString()
    }), { 
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
